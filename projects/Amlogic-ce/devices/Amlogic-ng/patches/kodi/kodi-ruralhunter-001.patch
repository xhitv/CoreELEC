diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index ad24c2d7ed..4532b020eb 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -937,10 +937,7 @@ void CVideoPlayer::OpenDefaultStreams(bool reset)
     if (OpenStream(m_CurrentSubtitle, stream.demuxerId, stream.id, stream.source))
     {
       valid = true;
-      if(!psp.relevant(stream))
-        visible = false;
-      else if(stream.flags & StreamFlags::FLAG_FORCED)
-        visible = true;
+      visible = true;
       break;
     }
   }
diff --git a/xbmc/video/VideoInfoDownloader.cpp b/xbmc/video/VideoInfoDownloader.cpp
index 8048647d11..e73241231f 100644
--- a/xbmc/video/VideoInfoDownloader.cpp
+++ b/xbmc/video/VideoInfoDownloader.cpp
@@ -21,6 +21,28 @@ using namespace KODI::MESSAGING;
 #pragma warning (disable:4018)
 #endif
 
+//fix for CMCT style names
+std::string parseMovieTitle(const std::string &title)
+{
+    CLog::Log(LOGINFO,"Parsing movie title: %s", title.c_str());
+    size_t start=0;    //the position actual name should start
+    if(title.at(0)=='[') //CMCT style
+    {
+        start=title.find(']');
+        if(start != std::string::npos) //found end
+        {
+            start++;
+            if(title.at(start)=='.')//skip '.'
+                start++;
+        }
+        if(start>=title.size() || start<0) //don't skip if the '[]' includes the whole filename
+            start=0;
+    }    
+    std::string actual=title.substr(start);
+    CLog::Log(LOGINFO,"Parsed actual title name: %s", actual.c_str());
+    return actual;
+}
+
 CVideoInfoDownloader::CVideoInfoDownloader(const ADDON::ScraperPtr &scraper) :
   CThread("VideoInfoDownloader"), m_state(DO_NOTHING), m_found(0), m_info(scraper)
 {
@@ -39,7 +61,7 @@ int CVideoInfoDownloader::InternalFindMovie(const std::string &movieTitle, int m
 {
   try
   {
-    movielist = m_info->FindMovie(*m_http, movieTitle, movieYear, cleanChars);
+    movielist = m_info->FindMovie(*m_http, parseMovieTitle(movieTitle), movieYear, cleanChars);
   }
   catch (const ADDON::CScraperError &sce)
   {
